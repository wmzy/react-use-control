{"version":3,"file":"control-f39c7a83.js","sources":["../../src/control.js"],"sourcesContent":["import {useState, useRef, useCallback} from 'react';\n\n// If the state change, control should update reference, so that the\n// react memo not be broken.\nconst oldControls = new WeakSet();\nconst isControlSymbol = Symbol('is control');\nconst base = {useState, [isControlSymbol]: true};\n\nfunction create(baseControl) {\n  return Object.create(baseControl || base);\n}\n\nexport function isControl(maybeControl) {\n  return Boolean(\n    maybeControl &&\n      typeof maybeControl === 'object' &&\n      maybeControl[isControlSymbol]\n  );\n}\n\nconst id = Symbol('id');\n\nfunction useNewControl(baseControl) {\n  const baseRef = useRef(baseControl);\n  const newCtl = create(baseControl);\n  const ref = useRef(newCtl);\n\n  if (__DEV__) {\n    const notSame = (a, b) => {\n      if (a === b) return false;\n      if (!(a && b)) return true;\n      return a[id] !== b[id];\n    };\n    if (notSame(baseControl, baseRef.current)) {\n      throw new Error('Should not call with different control');\n    }\n    const uniqueId = useRef(Symbol('unique id')).current;\n    newCtl[id] = uniqueId;\n  }\n\n  if (baseRef.current !== baseControl) {\n    baseRef.current = baseControl;\n    ref.current = newCtl;\n  } else if (oldControls.has(ref.current)) {\n    ref.current = newCtl;\n  }\n  return ref.current;\n}\n\nexport function useControl(control, initial) {\n  const ctrl = useNewControl(control);\n  const {state, useState} = ctrl;\n\n  if (Object.getPrototypeOf(ctrl).state) return [...state, ctrl];\n\n  const [value, setValue] = useState(initial);\n  const wrappedSetValue = useCallback((v) => {\n    setValue((oldValue) => {\n      const newValue = typeof v === 'function' ? v(oldValue) : v;\n      if (!Object.is(newValue, oldValue)) oldControls.add(ctrl);\n      return newValue;\n    });\n  }, []);\n  ctrl.state = [value, wrappedSetValue];\n\n  return [value, wrappedSetValue, ctrl];\n}\n\nexport function useThru(control, interceptor) {\n  const ctrl = useNewControl(control);\n  const {state, useState} = ctrl;\n  if (Object.getPrototypeOf(ctrl).state) {\n    ctrl.state = interceptor(state);\n  } else {\n    ctrl.useState = (...params) => interceptor(useState(...params));\n  }\n  return ctrl;\n}\n"],"names":["oldControls","isControlSymbol","base","useState","create","baseControl","id","useNewControl","baseRef","useRef","newCtl","ref","a","b","uniqueId","useControl","control","initial","ctrl","state","value","setValue","wrappedSetValue","useCallback","v","oldValue","newValue","useThru","interceptor","params"],"mappings":"wCAIA,MAAMA,EAAc,IAAI,QAClBC,EAAkB,OAAO,YAAY,EACrCC,EAAO,CAAA,SAACC,EAAQ,SAAE,CAACF,CAAe,EAAG,EAAI,EAE/C,SAASG,EAAOC,EAAa,CAC3B,OAAO,OAAO,OAAOA,GAAeH,CAAI,CAC1C,CAUA,MAAMI,EAAK,OAAO,IAAI,EAEtB,SAASC,EAAcF,EAAa,CAClC,MAAMG,EAAUC,SAAOJ,CAAW,EAC5BK,EAASN,EAAOC,CAAW,EAC3BM,EAAMF,SAAOC,CAAM,EAEZ,CAMX,IALgB,CAACE,EAAGC,IACdD,IAAMC,EAAU,GACdD,GAAKC,EACJD,EAAEN,CAAE,IAAMO,EAAEP,CAAE,EADC,IAGZD,EAAaG,EAAQ,OAAO,EACtC,MAAM,IAAI,MAAM,wCAAwC,EAE1D,MAAMM,EAAWL,EAAAA,OAAO,OAAO,WAAW,CAAC,EAAE,QAC7CC,EAAOJ,CAAE,EAAIQ,CACd,CAED,OAAIN,EAAQ,UAAYH,GACtBG,EAAQ,QAAUH,EAClBM,EAAI,QAAUD,GACLV,EAAY,IAAIW,EAAI,OAAO,IACpCA,EAAI,QAAUD,GAETC,EAAI,OACb,CAEO,SAASI,EAAWC,EAASC,EAAS,CAC3C,MAAMC,EAAOX,EAAcS,CAAO,EAC5B,CAAC,MAAAG,EAAO,SAAAhB,CAAQ,EAAIe,EAE1B,GAAI,OAAO,eAAeA,CAAI,EAAE,MAAO,MAAO,CAAC,GAAGC,EAAOD,CAAI,EAE7D,KAAM,CAACE,EAAOC,CAAQ,EAAIlB,EAASc,CAAO,EACpCK,EAAkBC,cAAaC,GAAM,CACzCH,EAAUI,GAAa,CACrB,MAAMC,EAAW,OAAOF,GAAM,WAAaA,EAAEC,CAAQ,EAAID,EACzD,OAAK,OAAO,GAAGE,EAAUD,CAAQ,GAAGzB,EAAY,IAAIkB,CAAI,EACjDQ,CACb,CAAK,CACF,EAAE,CAAE,CAAA,EACL,OAAAR,EAAK,MAAQ,CAACE,EAAOE,CAAe,EAE7B,CAACF,EAAOE,EAAiBJ,CAAI,CACtC,CAEO,SAASS,EAAQX,EAASY,EAAa,CAC5C,MAAMV,EAAOX,EAAcS,CAAO,EAC5B,CAAC,MAAAG,EAAO,SAAAhB,CAAQ,EAAIe,EAC1B,OAAI,OAAO,eAAeA,CAAI,EAAE,MAC9BA,EAAK,MAAQU,EAAYT,CAAK,EAE9BD,EAAK,SAAW,IAAIW,IAAWD,EAAYzB,EAAS,GAAG0B,CAAM,CAAC,EAEzDX,CACT"}